
tisla002_Project_BluetoothDriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000198  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000021c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a35  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000815  00000000  00000000  00000ce9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000045a  00000000  00000000  000014fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00001958  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000048e  00000000  00000000  000019ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001a6  00000000  00000000  00001e7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002020  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	48 d0       	rcall	.+144    	; 0x12a <main>
  9a:	7c c0       	rjmp	.+248    	; 0x194 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <initUSART>:
	static unsigned char dummy;
	if (usartNum != 1) {
		while ( UCSR0A & (1 << RXC0) ) { dummy = UDR0; }
	}
	else {
		while ( UCSR1A & (1 << RXC1) ) { dummy = UDR1; }
  9e:	81 30       	cpi	r24, 0x01	; 1
  a0:	81 f0       	breq	.+32     	; 0xc2 <initUSART+0x24>
  a2:	e1 ec       	ldi	r30, 0xC1	; 193
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	88 61       	ori	r24, 0x18	; 24
  aa:	80 83       	st	Z, r24
  ac:	e2 ec       	ldi	r30, 0xC2	; 194
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	86 60       	ori	r24, 0x06	; 6
  b4:	80 83       	st	Z, r24
  b6:	83 e3       	ldi	r24, 0x33	; 51
  b8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  bc:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  c0:	08 95       	ret
  c2:	e9 ec       	ldi	r30, 0xC9	; 201
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	88 61       	ori	r24, 0x18	; 24
  ca:	80 83       	st	Z, r24
  cc:	ea ec       	ldi	r30, 0xCA	; 202
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	86 60       	ori	r24, 0x06	; 6
  d4:	80 83       	st	Z, r24
  d6:	83 e3       	ldi	r24, 0x33	; 51
  d8:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
  dc:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
  e0:	08 95       	ret

000000e2 <USART_Send>:
//Parameter: Takes a single unsigned char value
//			 usartNum specifies which USART will send the char
//Returns: None
void USART_Send(unsigned char sendMe, unsigned char usartNum)
{
	if (usartNum != 1) {
  e2:	61 30       	cpi	r22, 0x01	; 1
  e4:	41 f0       	breq	.+16     	; 0xf6 <USART_Send+0x14>
		while( !(UCSR0A & (1 << UDRE0)) );
  e6:	e0 ec       	ldi	r30, 0xC0	; 192
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	90 81       	ld	r25, Z
  ec:	95 ff       	sbrs	r25, 5
  ee:	fd cf       	rjmp	.-6      	; 0xea <USART_Send+0x8>
		UDR0 = sendMe;
  f0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  f4:	08 95       	ret
	}
	else {
		while( !(UCSR1A & (1 << UDRE1)) );
  f6:	e8 ec       	ldi	r30, 0xC8	; 200
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	90 81       	ld	r25, Z
  fc:	95 ff       	sbrs	r25, 5
  fe:	fd cf       	rjmp	.-6      	; 0xfa <USART_Send+0x18>
		UDR1 = sendMe;
 100:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 104:	08 95       	ret

00000106 <USART_Receive>:
//Functionality - receives an 8-bit char value
//Parameter: usartNum specifies which USART is waiting to receive data
//Returns: Unsigned char data from the receive buffer
unsigned char USART_Receive(unsigned char usartNum)
{
	if (usartNum != 1) {
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	41 f0       	breq	.+16     	; 0x11a <USART_Receive+0x14>
		while ( !(UCSR0A & (1 << RXC0)) ); // Wait for data to be received
 10a:	e0 ec       	ldi	r30, 0xC0	; 192
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	88 23       	and	r24, r24
 112:	ec f7       	brge	.-6      	; 0x10e <USART_Receive+0x8>
		return UDR0; // Get and return received data from buffer
 114:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 118:	08 95       	ret
	}
	else {
		while ( !(UCSR1A & (1 << RXC1)) );
 11a:	e8 ec       	ldi	r30, 0xC8	; 200
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	88 23       	and	r24, r24
 122:	ec f7       	brge	.-6      	; 0x11e <USART_Receive+0x18>
		return UDR1;
 124:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	}
}
 128:	08 95       	ret

0000012a <main>:


int main(void)
{
    /* Replace with your application code */
	DDRC = 0xFF; PORTC = 0x00;				/* make PORT as output port */
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	87 b9       	out	0x07, r24	; 7
 12e:	18 b8       	out	0x08, r1	; 8
	
	char Data_in;
	initUSART(0);						/* initialize USART with 9600 baud rate */
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	b5 df       	rcall	.-150    	; 0x9e <initUSART>
	LED = 0;
 134:	18 b8       	out	0x08, r1	; 8
		{
			LED = 0x08;									/* Turn OFF LED */
			USART_Send(0x04, 0);				/* send status of LED i.e. LED OFF */
		}else if(Data_in =='5')
		{
			LED = 0x10;									/* Turn OFF LED */
 136:	10 e1       	ldi	r17, 0x10	; 16
		{
			LED = 0x04;									/* Turn OFF LED */
			USART_Send(0x03, 0);				/* send status of LED i.e. LED OFF */
		}else if(Data_in =='4')
		{
			LED = 0x08;									/* Turn OFF LED */
 138:	08 e0       	ldi	r16, 0x08	; 8
			USART_Send(0x01, 0);						/* send status of LED i.e. LED ON */
			
		}
		else if(Data_in =='2')
		{
			LED = 0x02;									/* Turn OFF LED */
 13a:	d2 e0       	ldi	r29, 0x02	; 2
	while(1)
	{
		Data_in = USART_Receive(0);						/* receive data from Bluetooth device*/
		if(Data_in =='1')
		{
			LED = 0x01;									/* Turn ON LED */
 13c:	c1 e0       	ldi	r28, 0x01	; 1
	initUSART(0);						/* initialize USART with 9600 baud rate */
	LED = 0;
	
	while(1)
	{
		Data_in = USART_Receive(0);						/* receive data from Bluetooth device*/
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	e2 df       	rcall	.-60     	; 0x106 <USART_Receive>
		if(Data_in =='1')
 142:	81 33       	cpi	r24, 0x31	; 49
 144:	29 f4       	brne	.+10     	; 0x150 <main+0x26>
		{
			LED = 0x01;									/* Turn ON LED */
 146:	c8 b9       	out	0x08, r28	; 8
			USART_Send(0x01, 0);						/* send status of LED i.e. LED ON */
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	8c 2f       	mov	r24, r28
 14c:	ca df       	rcall	.-108    	; 0xe2 <USART_Send>
 14e:	f7 cf       	rjmp	.-18     	; 0x13e <main+0x14>
			
		}
		else if(Data_in =='2')
 150:	82 33       	cpi	r24, 0x32	; 50
 152:	29 f4       	brne	.+10     	; 0x15e <main+0x34>
		{
			LED = 0x02;									/* Turn OFF LED */
			USART_Send(0x02, 0);				/* send status of LED i.e. LED OFF */
 154:	d8 b9       	out	0x08, r29	; 8
 156:	60 e0       	ldi	r22, 0x00	; 0
 158:	8d 2f       	mov	r24, r29
 15a:	c3 df       	rcall	.-122    	; 0xe2 <USART_Send>
 15c:	f0 cf       	rjmp	.-32     	; 0x13e <main+0x14>
		}
		else if(Data_in =='3')
 15e:	83 33       	cpi	r24, 0x33	; 51
 160:	31 f4       	brne	.+12     	; 0x16e <main+0x44>
		{
			LED = 0x04;									/* Turn OFF LED */
 162:	84 e0       	ldi	r24, 0x04	; 4
			USART_Send(0x03, 0);				/* send status of LED i.e. LED OFF */
 164:	88 b9       	out	0x08, r24	; 8
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	83 e0       	ldi	r24, 0x03	; 3
 16a:	bb df       	rcall	.-138    	; 0xe2 <USART_Send>
 16c:	e8 cf       	rjmp	.-48     	; 0x13e <main+0x14>
		}else if(Data_in =='4')
 16e:	84 33       	cpi	r24, 0x34	; 52
		{
			LED = 0x08;									/* Turn OFF LED */
 170:	29 f4       	brne	.+10     	; 0x17c <main+0x52>
			USART_Send(0x04, 0);				/* send status of LED i.e. LED OFF */
 172:	08 b9       	out	0x08, r16	; 8
 174:	60 e0       	ldi	r22, 0x00	; 0
 176:	84 e0       	ldi	r24, 0x04	; 4
 178:	b4 df       	rcall	.-152    	; 0xe2 <USART_Send>
		}else if(Data_in =='5')
 17a:	e1 cf       	rjmp	.-62     	; 0x13e <main+0x14>
 17c:	85 33       	cpi	r24, 0x35	; 53
		{
			LED = 0x10;									/* Turn OFF LED */
 17e:	29 f4       	brne	.+10     	; 0x18a <main+0x60>
			USART_Send(0x05, 0);				/* send status of LED i.e. LED OFF */
 180:	18 b9       	out	0x08, r17	; 8
 182:	60 e0       	ldi	r22, 0x00	; 0
 184:	85 e0       	ldi	r24, 0x05	; 5
 186:	ad df       	rcall	.-166    	; 0xe2 <USART_Send>
		}
		else{
			LED = 0x00;	
 188:	da cf       	rjmp	.-76     	; 0x13e <main+0x14>
			USART_Send(0x06, 0);	/* send message for selecting proper option */
 18a:	18 b8       	out	0x08, r1	; 8
 18c:	60 e0       	ldi	r22, 0x00	; 0
 18e:	86 e0       	ldi	r24, 0x06	; 6
 190:	a8 df       	rcall	.-176    	; 0xe2 <USART_Send>
 192:	d5 cf       	rjmp	.-86     	; 0x13e <main+0x14>

00000194 <_exit>:
 194:	f8 94       	cli

00000196 <__stop_program>:
 196:	ff cf       	rjmp	.-2      	; 0x196 <__stop_program>
